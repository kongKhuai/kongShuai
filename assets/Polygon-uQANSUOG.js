import{_ as l,bU as o}from"./index-CpEHNvOP.js";const e=o('<svg class="svg__x" data-v-4257e9f3><polygon points="15,10 55,10 45,20 5,20" style="fill:red;stroke:black;" data-v-4257e9f3></polygon><polygon points="35,37.5 37.9,46.1 46.9,46.1 39.7,51.5 42.3,60.1 35,55 27.7,60.1 30.3,51.5 23.1,46.1 32.1,46.1" fill="#ccffcc" stroke="green" data-v-4257e9f3></polygon><polygon points="60,60 65,72 80,60 90,90 72,80 72,85 50,95" class="polygon3" data-v-4257e9f3></polygon><polygon points="148,116 116,196 196,148 100,148 180,196" stroke="black" fill="none" data-v-4257e9f3></polygon><polygon points="148,16 116,96 196,48 100,48 180,96" fill="yellow" stroke="black" fill-rule="nonzero" data-v-4257e9f3></polygon><polygon points="248,16 216,96 296,48 200,48 280,96" fill="yellow" stroke="black" fill-rule="evenodd" data-v-4257e9f3></polygon></svg><aside class="explain" data-v-4257e9f3><ul data-v-4257e9f3><li data-v-4257e9f3>polygon 是多边形标签</li><li data-v-4257e9f3>points 指定一系列 x/一坐标对，并用逗号或空格分格</li><li data-v-4257e9f3>表示坐标的数字个数必须是偶数</li><li data-v-4257e9f3>指定坐标时不需要在最后指定返回起始坐标，因为图形是封闭的，会自动回到起始坐标</li><li data-v-4257e9f3>fill-rule 交叉区域规则，值：nonzero / evenodd</li><li data-v-4257e9f3>fill-rule: nonzero 在图形内部都填充</li><li data-v-4257e9f3>fill-rule: evenodd 边线相交的次数，奇数则认为在图形内部；偶数认为在图形外部</li><li data-v-4257e9f3> 如果交叉的边线是从右往左画，则总数加1；如果交叉的边线从左往右画，则总数减1.如果最后总数为0，则认为该点在图形外部，否则认为在图形内部 </li></ul></aside>',2),a={__name:"Polygon",setup(t){return(n,i)=>e}},f=l(a,[["__scopeId","data-v-4257e9f3"]]);export{f as default};
